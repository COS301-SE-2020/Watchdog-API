---
swagger: "2.0"
info:
  description: "The API for the Watchdog Security System"
  version: "1.0.0"
  title: "Watchdog Security"
host: "la7nxehzwg.execute-api.af-south-1.amazonaws.com"
basePath: "/alphav5"
schemes:
- "https"
paths:
  /hcp/controlpanelconfig:
    get:
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:af-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:af-south-1:878292117449:function:ControlPanelConfig/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /hcp/controlpanelconfig/registercamera:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::878292117449:role/dynamodbfullaccess"
        uri: "arn:aws:apigateway:af-south-1:dynamodb:action/UpdateItem"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n\"TableName\":\"UserData\",\n\"Item\": { \n      \"\
            Cameras\": {\n       \"CameraID\": {\n          \"Address\": {\n     \
            \       \"IPAddress\": { \"S\": \"$input.path('$.IPAddress')\" },\n  \
            \          \"Path\": {\"S\": \"$input.path('$.Path')\"},\n           \
            \ \"Port\": {\"S\": \"$input.path('$.Port')\"},\n            \"Protocol\"\
            : { \"S\": \"$input.path('$.Protocol')\"\n          }\n          },\n\
            \          \"HomeLocation\": { \"S\": \"$input.path('$.HomeLocation')\"\
            \ }\n      }\n    }\n  }\n  }"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /hcp/controlpanelconfig/registersite:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::878292117449:role/dynamodbfullaccess"
        uri: "arn:aws:apigateway:af-south-1:dynamodb:action/PutItem"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n\"TableName\":\"UserData\",\n\"Item\": { \n\"ControlPanel\"\
            : {\n    \"SiteID\": {\n      \"BroadcastIP\": {\n            \"S\": \"\
            $input.path('$.BroadcastIP')\"\n            },\n      \"Cameras\": {\n\
            \       \"S\": \"$input.path('$.Cameras')\"\n      },\n      \"PhysicalAddress\"\
            : { \n      \"S\": \"$input.path('$.PhysicalAddress')\"\n      }\n   \
            \ }\n  }\n}\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /hcp/detectintruder:
    post:
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:af-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:af-south-1:878292117449:function:DetectIntruder/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /hcp/uploadclip:
    post:
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:af-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:af-south-1:878292117449:function:UploadClip/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /testdynamo:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::878292117449:role/APIGatewayRole"
        uri: "arn:aws:apigateway:af-south-1:dynamodb:action/Query"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"UserData\",\n    \"KeyConditionExpression\"\
            : \"user_id = :v1\",\n    \"ExpressionAttributeValues\": {\n        \"\
            :v1\": {\n            \"S\": \"$input.params('user_id')\"\n        }\n\
            \    }\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::878292117449:role/APIGatewayRole"
        uri: "arn:aws:apigateway:af-south-1:dynamodb:action/PutItem"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"UserData\",\n    \"Item\": {\n\
            \        \"user_id\": {\"S\": $input.json('$.user_id')}\n    }\n}"
        passthroughBehavior: "never"
        httpMethod: "POST"
        type: "aws"
  /user:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /user/getcameras:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        responses:
          5\d{2}:
            statusCode: "500"
            responseTemplates:
              application/json: "{\r\n    \"statusCode\": 500,\r\n    \"message\"\
                : \"This is an error message.\"\r\n}"
          2\d{2}:
            statusCode: "200"
            responseTemplates:
              application/json: "{\nstatusCode:200,\nheaders: { \"Content-Type\":\
                \ \"application/json\" },\nbody: json.dumps({\n\"message\": { \n {\
                \ \n\"camera_id\":\"nu89rh9w8qio\",\n\"location\":\"living room\"\n\
                },\n{\n\"camera_id\":\"qhw89dsai\",\n\"location\":\"dining room\"\n\
                },\n{\n\"camera_id\":\"miascoqq0w\",\n\"location\":\"patio\"\n}\n\
                }\n})\n}\n"
        requestTemplates:
          application/json: "{ \n\"statusCode\":200\n}"
        passthroughBehavior: "when_no_templates"
        cacheNamespace: "kwrvjm"
        cacheKeyParameters:
        - "method.request.querystring.userID"
        type: "mock"
    post:
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:af-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:af-south-1:878292117449:function:GetCamera/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /user/gettoken:
    post:
      produces:
      - "application/json"
      responses: {}
      security:
      - Cognito_Auth: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:af-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:af-south-1:878292117449:function:GetToken/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /user/historical:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UserID"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "{\n\"statusCode\":200,\n\"message\": {\n  \"data\"\
                : [\n    { date: \"2020-06-06\",\n      time: \"16:22:35\"\n     \
                \ url: \"video.url.s3.aws\",\n      video_metadate: {},\n      type:\
                \ \"intruder\",\n      camera_id: \"1\"\n      \n    },\n    { date:\
                \ \"2020-06-06\",\n      time: \"16:22:35\"\n      url: \"video.url.s3.aws\"\
                ,\n      video_metadate: {},\n      type: \"periodic\",\n      camera_id:\
                \ \"2\"\n    },\n    { date: \"2020-06-06\",\n      time: \"16:22:35\"\
                \n      url: \"video.url.s3.aws\",\n      video_metadate: {},\n  \
                \    type: \"movement\",\n      camera_id: \"3\"\n    }\n  ]\n}\n}"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_templates"
        type: "mock"
securityDefinitions:
  Cognito_Auth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - "arn:aws:cognito-idp:eu-west-1:878292117449:userpool/eu-west-1_mQ0D78123"
      type: "cognito_user_pools"
x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-binary-media-types:
- "image/png"
- "image/jpg"
- "image/jpeg"
- "*/*"
